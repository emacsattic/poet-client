(require 'poet-client)
(describe "Parsing json data"
          (it "indexing"
              (let ((works
                     [((archiveUrl . "url-one")
                       (hash . "hash-one")
                       (name . "code clean up")
                       (dateCreated . "2019-01-20T11:41:56.217Z")
                       (datePublished . "2019-01-20T11:41:56.221Z")
                       (author . "WY")
                       (tags . "cleanup refactoring elisp"))
                      ((archiveUrl . "url-two")
                       (hash . "hash-two")
                       (name . "using let to remove defvar")
                       (dateCreated . "2019-01-19T10:25:27.505Z")
                       (datePublished . "2019-01-19T10:25:27.506Z")
                       (author . "WY")
                       (tags . "localvar let"))]))
                (setq parsed-data (poet-client-parse-works-response works))
                (expect (length parsed-data) :to-be 2)
                ;; Check index
                (expect (car (nth 0 parsed-data)) :to-be 1)
                (expect (car (nth 1 parsed-data)) :to-be 2)
                ))
          (it "extracting tokens"
              (let ((work
                     '((archiveUrl . "url-one")
                       (hash . "hash-one")
                       (name . "code clean up")
                       (dateCreated . "2019-01-20T11:41:56.217Z")
                       (datePublished . "2019-01-20T11:41:56.221Z")
                       (author . "WY")
                       (tags . "cleanup refactoring elisp"))))
                ;; Check index
                (setq parsed-data (poet-client-parse-works-extract-values work))
                (expect (aref parsed-data 0) :to-match "code clean up")
                (expect (aref parsed-data 1) :to-match "WY")
                (expect (aref parsed-data 2) :to-match "cleanup refactoring elisp")
                (expect (aref parsed-data 3) :to-match "2019-01-20T11:41:56.217Z")
                (expect (aref parsed-data 4) :to-match "2019-01-20T11:41:56.221Z"))))
