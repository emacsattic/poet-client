* po.et API client
:PROPERTIES:
:TOC:      ignore
:END:

This is an Emacs client for [[https://www.po.et][po.et]]. A decentralized protocol for content ownership, discovery and monetization in media.
The client allows a user to:
 1. Create and publish work to po.et, using a content of a buffer wihtin Emacs.
 2. List and view published works.

** Screenshots
Register a claim
[[file:poet-create-claim.gif]]

Retrieve and view claims
[[file:poet-retrieve-works.gif]]

* Installation
:PROPERTIES:
:TOC:      0
:END:

** MELPA

   To-Do

** Manual

  Install these required packages:

  + request
  + widget

  Then put poet-client.el in your load-path, and add this in .Emacs init file:

  #+BEGIN_SRC elisp
(require 'poet-client)
  #+END_SRC

* Configuration
:PROPERTIES:
:TOC:      0
:END:

 1. This is the only required step. Get an API token by following instructions at https://docs.poetnetwork.net/use-poet/create-your-first-claim.html
 2. Optional: In Emacs @@html:<kbd>@@M-x@@html:</kbd>@@ ~customize group~ ~po.et~ then fill the API token. *Warning:* this will save your token in .Emacs config file. Ignore this step if you do not want the token to be saved. You will be prompted when creating a claim.
 3. Optional: Fill the default author field, then it will be autofilled in the form.

* Usage
:PROPERTIES:
:TOC:      0
:END:

*** Register your claim:
 1. Activate the buffer that contains the content for publishing.
 2. In Emacs: @@html:<kbd>@@M-x@@html:</kbd>@@ ~poet-register-claim~
 3. A Form will be displayed and the staged content will be displayed in the bottom half.
 4. Fill the form. an API token field will be displayed if the token is not configured. In this case you will need to fill this field with your token. Note that the token will not be remembered.
 5. Click on Create claim to publish your work.

***  Retrieve your claim:
 1. @@html:<kbd>@@M-x@@html:</kbd>@@ ~poet-retrieve-works~
 2. All published works will be displayed in an interactive list.
 3. Select the desired work from the list and press return to view it.
 

** Tips

+ It is possible to create a claim on a marked region in a buffer. Just highlight the region and execute poet-create-claim.


* Development

With consideration that this is my first development in elisp, I do welcome bug reports, feature requests, suggestions and pull requests.
